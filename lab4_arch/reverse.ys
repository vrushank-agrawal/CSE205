# Name: Vrushank Agrawal
# id  : vrushank.agrawal

    irmovq $0, %rax     # sum
    irmovq $0, %rbx     # pointer
    irmovq $0, %rsi     # reverse pointer
    irmovq $-8, %r11    # const -8
    irmovq $-1, %r9     # const -1
    irmovq $0, %r10     # const 0
    irmovq $8, %r8      # byte size
    mrmovq len, %rdx    # length for multiplication

MulLoop:                # put revere pointer to len*8 for dst
    subq   %r10, %rdx   # check while
    je Lredefine        # check len-0=0
    addq   %r8, %rsi    # jump 8 bits for dst revere pointer
    addq   %r9, %rdx    # decrese length by 1
    jmp MulLoop

Lredefine:
    mrmovq len, %rdx    # redefine length

Lstart:
    subq   %r10, %rdx   # check while
    jg Loop             # check len-0>0
    jmp Lend

Loop:                   # reverse the arrays and add values to the sum
    mrmovq src(%rbx), %rcx      # get value of src(pointer)
    rmmovq %rcx, dst(%rsi)      # change value of dst(reverse pointer)
    addq   %rcx, %rax           # add value to sum register
    addq   %r9, %rdx            # decrease len by 1
    addq   %r8, %rbx            # add 8 to the pointer for src
    addq   %r11, %rsi           # add -8 to the reverse pointer for dst
    jmp Lstart
    
Lend:
    rmmovq %rax, sum            # return the sum
    halt


.align 8
# Source block
src:
        .quad 0x00a
        .quad 0x0b0
        .quad 0xc00

# Destination block
dst:
        .quad 0x111
        .quad 0x222
        .quad 0x333

len: .quad 0x03
sum: .quad 0x00  
